* Intro class
First two chapters of Haskell Programming from First principles
** What is it?
Lazy, pure functional programming language.
*** Functional
- write your code in terms of expressions, instead of statemetns.
- An expression always has a value, whereas statements may or may not give you a value.
- Functions are itself a value: you can pass it around - first-class. [surjective, non-injective]

*** Purity
- A function is referentially transparent: for the same input, output is always the same.
- Random is not pure fn. Haskell, you need a lot of ceremony to write impure function.

*** Lazy
** Lambda calculus
*** 1. alpha equivalence
argument is defined only in the context of the lambda.
if expr is same, and arity of input variables are same, same function.
- i.e. fn(x).x+1 is equivalent to fn(y).y+1, when fn(x,y).x+1 is not equivalent.
*** 2. beta reduction
- now you have fns, what do you do with them?
- you evaluate functions. beta reduction is evaluation
- E.g. of evaluationL (fn(x).x+1)2 becomes 2+1 becomes 3. 3 is the normal form, a value which cannot be reduced anymore.
- Normal form: not beta reducible - not necessarily value. in the below case, the last expr is in its normal form.
- (f(x).x+1) (f(y).y) = (f(y).y+1) + 1


*** Free variables
- In 1 + y, y is a free variable. if you never know what the value of a free variable is, then you're not really using it.
- in lambda calculus, all functions take only one input. (f(y).f(x).x+y)2 1 = (f(x).x+2)1 = 1 + 2 = 3
- a free variable may be closed on another function outside. in a full program all free variables will close.
*** Divergent functions
- All fns are not beta reducible.
-^ this is a DIVERGENT function  E.G. (f(x).xx)(f(x).xx) = (f(x).xx)(f(x).xx). They never have a value. They never converge.
+ Their not having a value is called a 'bottom' - not having a value.
+ Halting problem: the program can never know whether it will halt. you can't write a program that can determine whether computation will end.
+ there's `undefined` in haskell, which is also a bottom. you can write a program that never stops executing or give you a value, which means you got a bottom.
** Haskell the language & setup
- A spec comes out every (?) 10 years. Committee publishes a spec and someone implements that.
- There still are multiple compilers for haskell
- Most commonly used ghc (Glasgow haskell compiler)
- Dependencies are source only, hence all packages compile on your system.
- stack can cache precompiled packages.
*** stack
- haskellstack.org
- stack setup for compiler
- stack install packages
- do `stack ghci` to

** Code in repl
1. let sq x = x * x
2. let exp x y = x ^ y
3. (+) 1 1
4. integer division is `div`5
5. / is fractional division
*** symbolic and regular
6. / + are all symbolic function coz they can be infix. Can be turned to regular fns (prefix) by wrapping it in parens
7. any regular fn can be turned to a symbolic fn by using back ticks 10 `div` 2
*** associativity and precedence of a function
- in ghci :info (*) returns infixl 7 *, means that * is left associative with a precedence of 7
- custom functions can alse be defined with these charactersistic defined
- defining for custom functions:
let (##) x y = x + y
infixl 7 ##
- let x $$ y = x + y [also works but only if a variable name has special symbols]
*** math fns & types
- / + mod
- quot will always round towards 0 (try with negative)
- div always round towards the other direction
- rem & mod
- is both a binary function and a unary function - only - is special like that.
- 'a' is a char & "a" is a string, so you can't compare them

** Strings
[28/11/2017]

- A list of [Char]
*** Print
- putStrLn "dfdfdfd"
- putStr "asdas"
write to stdout

*** Concatenation
- "asdasd" ++ "asdasd"
- :t (++)    {brackets are required for fns with symbolic names}
- concat ["asdasd", "asdasd", "asdasd"]
- concat [[1,2,3], [1,2,3]]

*** Lists
- all elements have to be of same type: homogeneous lists.

** Functions of multiple arguments / Currying
- All functions are curried by default.
- [a] -> ([a] -> [a])
- A function which returns another function of type [a] -> [a]

** Adhoc Polymorphism
- A same thing behaves in different ways depending on the args you give it.
- Adhoc: can give it anything. [a] -> [a] -> [a]

** Cons
- 'c' : "Ssdsd"

** Head
- :t head
- Can either only return the first or the last element. Not any, because it won't be referenitally transparent if it was random.
- Equational reasoning/logic: reason a lot of stuff by looking at type signatures.

** Tail
- :t tail
- Rest of the list.

** Take
take 3 "asdasda" -> asd
take 100 "asdas" -> "asdas"

** Drop
drop 2 "asdasd" -> "dasd"
drop (-1) "Sadssa" -> "Sadssa"

** Unsafe functions
- head and tail crash on invalid inputs. There ar elinters which will indicate them. There are safe versions.
- They are also called non-total functions: they have bottoms :P
** !! (Indexing)
"asdasd" !! 44 (unsafe)
** If
if True then 'a' else 'v'
** Top-level defs
Don't need a let.
** Non-agnostic indentation
** let
- is defined for a certain expression, hence let ... in <expr> syntax
- you can nest lets.
- in repl you can use :set +m for newlines, and :unset +m to stop doing that
- bindings are ordered sequentially.
